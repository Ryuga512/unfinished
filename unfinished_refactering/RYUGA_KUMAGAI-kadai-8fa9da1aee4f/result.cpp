//=============================================================================
//
// リザルト画面処理 [result.cpp]
// Author : GP11A132 12 熊谷隆我
//
//=============================================================================
#include "result.h"
#include "input.h"
#include "fade.h"
#include "sound.h"
#include "sprite.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_WIDTH				(SCREEN_WIDTH)	// 背景サイズ
#define TEXTURE_HEIGHT				(SCREEN_HEIGHT)	// 
#define TEXTURE_MAX					(2)				// テクスチャの数

#define TEXTURE_WIDTH_LOGO			(480)			// ロゴサイズ
#define TEXTURE_HEIGHT_LOGO			(80)			// 

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************


//*****************************************************************************
// グローバル変数
//*****************************************************************************
static ID3D11Buffer				*g_VertexBuffer = NULL;		// 頂点情報
static ID3D11ShaderResourceView	*g_Texture[TEXTURE_MAX] = { NULL };	// テクスチャ情報

static char *g_TexturName[] = {
    "data/TEXTURE/fade_black.png",
    "data/TEXTURE/result_logo.png",
};


static bool						g_Use;						// true:使っている  false:未使用
static float					g_w, g_h;					// 幅と高さ
static D3DXVECTOR3				g_Pos;						// ポリゴンの座標
static int						g_TexNo;					// テクスチャ番号


//=============================================================================
// 初期化処理
//=============================================================================
HRESULT InitResult(void)
{
    ID3D11Device *pDevice = GetDevice();

    //テクスチャ生成
    for (int i = 0; i < TEXTURE_MAX; i++)
    {
        g_Texture[i] = NULL;
        D3DX11CreateShaderResourceViewFromFile(GetDevice(),
            g_TexturName[i],
            NULL,
            NULL,
            &g_Texture[i],
            NULL);
    }


    // 頂点バッファ生成
    D3D11_BUFFER_DESC bd;
    ZeroMemory(&bd, sizeof(bd));
    bd.Usage = D3D11_USAGE_DYNAMIC;
    bd.ByteWidth = sizeof(VERTEX_3D) * 4;
    bd.BindFlags = D3D11_BIND_VERTEX_BUFFER;
    bd.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
    GetDevice()->CreateBuffer(&bd, NULL, &g_VertexBuffer);


    // 変数の初期化
    g_Use = true;
    g_w = TEXTURE_WIDTH;
    g_h = TEXTURE_HEIGHT;
    g_Pos = D3DXVECTOR3(g_w / 2, g_h / 2, 0.0f);
    g_TexNo = 0;

    // BGM再生
    PlaySound(SOUND_LABEL_BGM_sample002);

    return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitResult(void)
{
    if (g_VertexBuffer)
    {
        g_VertexBuffer->Release();
        g_VertexBuffer = NULL;
    }

    for (int i = 0; i < TEXTURE_MAX; i++)
    {
        if (g_Texture[i])
        {
            g_Texture[i]->Release();
            g_Texture[i] = NULL;
        }
    }

}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateResult(void)
{

    if (GetKeyboardTrigger(DIK_RETURN))
    {// Enter押したら、ステージを切り替える
        SetFade(FADE_OUT, MODE_TITLE);
    }
    // ゲームパッドで入力処理
    else if (IsButtonTriggered(0, BUTTON_START))
    {
        SetFade(FADE_OUT, MODE_TITLE);
    }
    else if (IsButtonTriggered(0, BUTTON_B))
    {
        SetFade(FADE_OUT, MODE_TITLE);
    }


#ifdef _DEBUG	// デバッグ情報を表示する
    //char *str = GetDebugStr();
    //sprintf(&str[strlen(str)], " PX:%.2f PY:%.2f", g_Pos.x, g_Pos.y);

#endif

}

//=============================================================================
// 描画処理
//=============================================================================
void DrawResult(void)
{
    // 頂点バッファ設定
    UINT stride = sizeof(VERTEX_3D);
    UINT offset = 0;
    GetDeviceContext()->IASetVertexBuffers(0, 1, &g_VertexBuffer, &stride, &offset);

    // マトリクス設定
    SetWorldViewProjection2D();

    // プリミティブトポロジ設定
    GetDeviceContext()->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP);

    // マテリアル設定
    MATERIAL material;
    ZeroMemory(&material, sizeof(material));
    material.Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
    SetMaterial(material);

    // リザルトの背景を描画
    {
        // テクスチャ設定
        GetDeviceContext()->PSSetShaderResources(0, 1, &g_Texture[0]);
        float ro = 0;
        // １枚のポリゴンの頂点とテクスチャ座標を設定
        SetSprite(g_VertexBuffer, g_Pos.x, g_Pos.y, g_w, g_h, 0.0f, 0.0f, 1.0f, 1.0f);

        // ポリゴン描画
        GetDeviceContext()->Draw(4, 0);
    }

    // リザルトのロゴを描画
    {
        // テクスチャ設定
        GetDeviceContext()->PSSetShaderResources(0, 1, &g_Texture[1]);
        float ro = 0.0f;
        // １枚のポリゴンの頂点とテクスチャ座標を設定
        SetSprite(g_VertexBuffer, g_Pos.x, g_Pos.y, TEXTURE_WIDTH_LOGO, TEXTURE_HEIGHT_LOGO, 0.0f, 0.0f, 1.0f, 1.0f);

        // ポリゴン描画
        GetDeviceContext()->Draw(4, 0);
    }

}

